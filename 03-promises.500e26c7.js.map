{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAmCpC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAM,CAAEF,WAAUC,SAClBE,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQL,GAERM,EAAON,E,GAERD,E,IA5CPL,EAAKc,iBAAiB,UAAU,SAAAC,GAChCA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,OAAOC,SAArCC,EAAwBH,EAAxBZ,MAAOgB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAaC,OAAOJ,EAAMK,OACxBC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAGhC,GAAIF,EAAa,GAAKG,EAAY,GAAKC,GAAe,EAClDC,EAAA9B,GAAS+B,OAAOC,QACd,8DAFN,CAOI,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAaI,IAChC5B,EAAc4B,EAAGR,GACdS,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBuB,EAAA9B,GAAS+B,OAAOK,QACd,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAEjD+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBuB,EAAA9B,GAAS+B,OAAOC,QACd,sBAAqCK,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAGjDkB,GAAcG,EAGlB1B,EAAKqC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', event => {\nevent.preventDefault();\n  \nconst { delay, step, amount } = event.target.elements;\nlet delayValue = Number(delay.value);\nconst stepValue = Number(step.value);\nconst amountValue = Number(amount.value);\n \n  \n  if (delayValue < 0 || stepValue < 0 || amountValue <= 0) {\n      Notiflix.Notify.failure(\n        'Values must be above zero. Please check and try again.'\n      );\n    return;\n    \n    } else {\n      for (let i = 1; i <= amountValue; i++) {\n        createPromise(i, delayValue )\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(\n              `✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(\n              `❌ Rejected promise ${position} in ${delay}ms`);\n          });\n   \n        delayValue += stepValue;\n      }\n    }\n    form.reset();\n  });\n\nfunction createPromise(position, delay) {\n  const obj = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(obj);\n      } else {\n        reject(obj);\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","obj","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","_elements","target","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.500e26c7.js.map"}